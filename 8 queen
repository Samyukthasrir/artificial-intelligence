def is_safe(board, row, col):
    
    for i in range(row):
        if board[i] == col:
            return False
    
    
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i] == j:
            return False
    
    
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i] == j:
            return False
    
    return True

def solve_queens(board, row):
    n = len(board)
    
    
    if row >= n:
        return True
    
   
    for col in range(n):
        if is_safe(board, row, col):
            
            board[row] = col
            if solve_queens(board, row + 1):
                return True
            
            board[row] = -1
    
        return False

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ''
        for col in range(n):
            if board[row] == col:
                line += 'Q '
            else:
                line += '. '
        print(line)
    print()

def solve_8_queens():
    
    board = [-1] * 8
    
    if solve_queens(board, 0):
        print("Solution found:")
        print_board(board)
    else:
        print("No solution exists")


solve_8_queens()
